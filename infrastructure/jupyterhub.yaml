hub:
  extraConfig:
    jupyterhub_extra_config: |



      # ================ CDSDASHBOARDS =====================
      c.JupyterHub.allow_named_servers = True
      from cdsdashboards.hubextension import cds_extra_handlers
      c.JupyterHub.extra_handlers = cds_extra_handlers
      from cdsdashboards.app import CDS_TEMPLATE_PATHS
      c.JupyterHub.template_paths = CDS_TEMPLATE_PATHS
      c.JupyterHub.spawner_class = 'cdsdashboards.hubextension.spawners.variablekube.VariableKubeSpawner'
      c.CDSDashboardsConfig.builder_class = 'cdsdashboards.builder.kubebuilder.KubeBuilder'
      c.VariableMixin.default_presentation_cmd = ['python3', '-m', 'jhsingle_native_proxy.main']

      c.JupyterHub.default_url = '/hub/home'

      # Force dashboard creator to select an instance size
      c.CDSDashboardsConfig.spawn_default_options = False

      c.CDSDashboardsConfig.conda_envs = [
          "dask",
          "dashboard",
      ]



      # ==================== THEME =========================
      import tornado.web
      import qhub_jupyterhub_theme

      c.JupyterHub.extra_handlers += [
          (r'/custom/(.*)', tornado.web.StaticFileHandler, {"path": qhub_jupyterhub_theme.STATIC_PATH}),
      ]

      c.JupyterHub.template_paths = [
          qhub_jupyterhub_theme.TEMPLATE_PATH
      ] + c.JupyterHub.template_paths

      c.JupyterHub.template_vars = {
          "hub_title": "QHub - thisisatest",
          "hub_subtitle": "Autoscaling Compute Environment",
          "welcome": "Welcome to github-actions.qhub.dev. It is maintained by <a href=\"http://quansight.com\">Quansight staff</a>. The hub's configuration is stored in a github repository based on <a href=\"https://github.com/Quansight/qhub/\">https://github.com/Quansight/qhub/</a>. To provide feedback and report any technical problems, please use the <a href=\"https://github.com/Quansight/qhub/issues\">github issue tracker</a>.",
          "logo": "/hub/custom/images/jupyter_qhub_logo.svg",
          "primary_color": "#4f4173",
          "secondary_color": "#957da6",
          "accent_color": "#32C574",
          "text_color": "#111111",
          "h1_color": "#652e8e",
          "h2_color": "#652e8e",

          "cdsdashboards_enabled": True,
          
          "cds_hide_user_named_servers": True,
          
          
          "cds_hide_user_dashboard_servers": False,
          

      }

      # ================= Profiles =====================
      QHUB_USER_MAPPING = {'example-user': {'uid': 1000, 'primary_group': 'admin', 'secondary_groups': ['users'], 'password': '$2b$12$7anfP..rQCIXku5NcB8UUe/r/prfNRPhjOk5obTTcXQlIsgTnzwRi'}}
      QHUB_GROUP_MAPPING = {'users': {'gid': 100}, 'admin': {'gid': 101}}
      QHUB_PROFILES = [{'display_name': 'Small Instance', 'description': 'Stable environment with 1 cpu / 4 GB ram', 'default': True, 'kubespawner_override': {'cpu_limit': 1, 'cpu_guarantee': 0.75, 'mem_limit': '4G', 'mem_guarantee': '2.5G', 'image': 'quansight/qhub-jupyterlab:v0.3.11'}}, {'display_name': 'Medium Instance', 'description': 'Stable environment with 2 cpu / 8 GB ram', 'kubespawner_override': {'cpu_limit': 2, 'cpu_guarantee': 1.5, 'mem_limit': '8G', 'mem_guarantee': '5G', 'image': 'quansight/qhub-jupyterlab:v0.3.11'}}]


      def qhub_generate_nss_files():
          passwd = []
          passwd_format = '{username}:x:{uid}:{gid}:{username}:/home/jovyan:/bin/bash'
          for username, config in QHUB_USER_MAPPING.items():
              uid = config['uid']
              gid = QHUB_GROUP_MAPPING[config['primary_group']]['gid']
              passwd.append(passwd_format.format(username=username, uid=uid, gid=gid))

          group = []
          group_format = '{groupname}:x:{gid}:'
          for groupname, config in QHUB_GROUP_MAPPING.items():
              gid = config['gid']
              group.append(group_format.format(groupname=groupname, gid=gid))

          return '\n'.join(passwd), '\n'.join(group)


      def qhub_list_admins(users):
          return [k for k,v in users.items() if v['primary_group'] == 'admin']


      def qhub_list_users(users):
          return [k for k,v in users.items() if v['primary_group'] != 'admin']


      def qhub_list_user_groups(username):
          user = QHUB_USER_MAPPING[username]
          return set([user['primary_group']] + user.get('secondary_groups', []))


      def qhub_configure_profile(username, safe_username, profile):
          user = QHUB_USER_MAPPING[username]
          uid = user['uid']
          primary_gid = QHUB_GROUP_MAPPING[user['primary_group']]['gid']
          secondary_gids = [QHUB_GROUP_MAPPING[_]['gid'] for _ in user.get('secondary_groups', [])]

          profile['kubespawner_override']['environment'] = {
             'LD_PRELOAD': 'libnss_wrapper.so',
             'NSS_WRAPPER_PASSWD': '/tmp/passwd',
             'NSS_WRAPPER_GROUP': '/tmp/group',
             'NB_UMASK': '0002',
             'SHELL': '/bin/bash',
             'HOME': '/home/jovyan',
             **(profile.get('kubespawner_override', {}).get('environment', {}))
          }

          passwd, group = qhub_generate_nss_files()
          profile['kubespawner_override']['lifecycle_hooks'] = {
              "postStart": {
                  "exec": {
                      "command": ["/bin/sh", "-c", (
                           "echo '{passwd}' > /tmp/passwd && "
                           "echo '{group}' > /tmp/group && "
                           "ln -sfn /home/shared /home/jovyan/shared"
                      ).format(passwd=passwd, group=group)]
                  }
              }
          }

          profile['kubespawner_override']['init_containers'] = [
              {
                   "name": "init-nfs",
                   "image": "busybox:1.31",
                   "command": ["sh", "-c", ' && '.join([
                        "mkdir -p /mnt/home/{username}",
                        "chmod 700 /mnt/home/{username}",
                        "chown {uid}:{primary_gid} /mnt/home/{username}",
                        "mkdir -p /mnt/home/shared",
                        "chmod 777 /mnt/home/shared"
                   ] + ["mkdir -p /mnt/home/shared/{groupname} && chmod 2770 /mnt/home/shared/{groupname} && chown 0:{gid} /mnt/home/shared/{groupname}".format(groupname=groupname, gid=config['gid']) for groupname, config in QHUB_GROUP_MAPPING.items()]).format(username=safe_username, uid=uid, primary_gid=primary_gid)],
                   "securityContext": {"runAsUser": 0},
                   "volumeMounts": [{"mountPath": "/mnt", "name": "home"}]
              }
          ]

          profile['kubespawner_override']['uid'] = uid
          profile['kubespawner_override']['gid'] = primary_gid
          profile['kubespawner_override']['supplemental_gids'] = secondary_gids
          profile['kubespawner_override']['fs_gid'] = primary_gid
          return profile

      def qhub_list_available_profiles(username):
          import escapism
          import string
          safe_chars = set(string.ascii_lowercase + string.digits)
          safe_username = escapism.escape(username, safe=safe_chars, escape_char='-').lower()

          exclude_keys = {'users', 'groups'}

          groups = qhub_list_user_groups(username)

          available_profiles = []
          for profile in QHUB_PROFILES:
              filtered_profile = qhub_configure_profile(username, safe_username, {k: v for k,v in profile.items() if k not in exclude_keys})

              if 'users' in profile:
                  if username in profile['users']:
                      available_profiles.append(filtered_profile)
              elif 'groups' in profile:
                  if len(groups & set(profile['groups'])) != 0:
                      available_profiles.append(filtered_profile)
              else:
                  available_profiles.append(filtered_profile)

          return available_profiles


      c.JupyterHub.admin_access = True
      c.Authenticator.admin_users = qhub_list_admins(QHUB_USER_MAPPING)
      c.Authenticator.whitelist = qhub_list_users(QHUB_USER_MAPPING)

      async def custom_options_form(self):
           self.profile_list = qhub_list_available_profiles(self.user.name)

           # Let KubeSpawner inspect profile_list and decide what to return
           return self._options_form_default()

      c.KubeSpawner.options_form = custom_options_form
      c.LocalProcessSpawner.shell_cmd = ['bash', '-l', '-c']

      # ==================== AUTHENTICATION ======================

      # =================== PASSWORD BASED =======================
      # create passwords via
      # >>> bcrypt.hashpw(b'<password>', bcrypt.gensalt())
      import bcrypt
      from jupyterhub.auth import Authenticator

      class QHubPasswordAuthenticator(Authenticator):
          async def authenticate(self, handler, data):
              username, password = data['username'], data['password'].encode('utf-8')
              if username not in QHUB_USER_MAPPING:
                  return None

              if 'password' not in QHUB_USER_MAPPING[username]:
                  return None

              salted_password = QHUB_USER_MAPPING[username]['password'].encode('utf-8')
              if bcrypt.checkpw(password, salted_password):
                  return username
              return None

      c.JupyterHub.authenticator_class = QHubPasswordAuthenticator




singleuser:
  storage:
    homeMountPath: /home/jovyan

cull:
  enabled: true
  timeout: 1800 # cull after 30min of inactivity
  every: 600
